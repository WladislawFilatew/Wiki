{"ast":null,"code":"import { makeAutoObservable } from \"mobx\";\nimport Mark from \"./Mark\";\nimport State from \"./State\";\nexport default class TextWiki {\n  constructor() {\n    this._group = [];\n    this._text = [];\n    this._selectedGroup = {};\n    this._selectedUser = {};\n    this._page = 1;\n    this._totalCount = 0;\n    this._limit;\n    makeAutoObservable(this);\n  }\n  setSelectedGroup(group) {\n    this._selectedGroup = group;\n  }\n  setSelectedUser(user) {\n    this._selectedUser = user;\n  }\n  setGroup(group) {\n    this._group = group;\n  }\n  setText(splitText) {\n    const text = splitText.map(temp => temp = {\n      id: temp.id,\n      state: new State(temp.id, temp.title, temp.text),\n      userId: temp.userId,\n      userName: temp.user.fn + ' ' + temp.user.sn,\n      group: {\n        id: temp.groupId,\n        name: temp.group.name\n      },\n      mark: new Mark(temp.mark, false)\n    });\n    this._text = text;\n  }\n  addText(temp, userName, groupName) {\n    const obj = {\n      id: temp.id,\n      state: new State(temp.id, temp.title, temp.text),\n      userId: temp.userId,\n      userName: userName,\n      group: {\n        id: temp.groupId,\n        name: groupName\n      },\n      mark: new Mark(0, false)\n    };\n    this._text.push(obj);\n  }\n  delTextId(id) {\n    this._text = this._text.filter(text => text.id != id);\n  }\n  get groups() {\n    return this._group;\n  }\n  get texts() {\n    return this._text;\n  }\n  get selectedGroup() {\n    return this._selectedGroup;\n  }\n  get selectedUser() {\n    return this._selectedUser;\n  }\n}","map":{"version":3,"names":["makeAutoObservable","Mark","State","TextWiki","constructor","_group","_text","_selectedGroup","_selectedUser","_page","_totalCount","_limit","setSelectedGroup","group","setSelectedUser","user","setGroup","setText","splitText","text","map","temp","id","state","title","userId","userName","fn","sn","groupId","name","mark","addText","groupName","obj","push","delTextId","filter","groups","texts","selectedGroup","selectedUser"],"sources":["C:/Users/fill2/OneDrive/Рабочий стол/Проект Wiki/Wiki/client/src/wiki/TextWiki.js"],"sourcesContent":["import {makeAutoObservable} from \"mobx\"\r\nimport Mark from \"./Mark\"\r\nimport State from \"./State\"\r\n\r\nexport default class TextWiki{\r\n    constructor(){\r\n        this._group = []\r\n        this._text = []\r\n        this._selectedGroup = {};\r\n        this._selectedUser = {};\r\n\r\n        this._page = 1\r\n        this._totalCount = 0\r\n        this._limit\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    setSelectedGroup(group){\r\n        this._selectedGroup = group\r\n    }\r\n\r\n    setSelectedUser(user){\r\n        this._selectedUser = user\r\n    }\r\n\r\n    setGroup(group){\r\n        this._group = group\r\n    }\r\n\r\n    setText(splitText){\r\n        const text = splitText.map(temp => temp = \r\n            {id: temp.id, state: new State(temp.id, temp.title, temp.text),\r\n            userId: temp.userId, userName: temp.user.fn + ' ' + temp.user.sn,\r\n            group: {id: temp.groupId, name: temp.group.name}, mark: new Mark(temp.mark,false)}\r\n        )\r\n        this._text = text\r\n    }\r\n\r\n    addText(temp, userName, groupName){\r\n        const obj =  {id: temp.id, state: new State(temp.id, temp.title, temp.text),\r\n            userId: temp.userId, userName: userName,\r\n            group: {id: temp.groupId, name: groupName}, mark: new Mark(0,false)}\r\n        this._text.push(obj)\r\n    }\r\n\r\n    delTextId(id){\r\n        this._text = this._text.filter(text => text.id != id)\r\n    }\r\n\r\n    get groups(){\r\n        return this._group\r\n    }\r\n\r\n    get texts(){\r\n        return this._text\r\n    }\r\n\r\n    get selectedGroup(){\r\n        return this._selectedGroup\r\n    }\r\n\r\n    get selectedUser(){\r\n        return this._selectedUser\r\n    }\r\n}"],"mappings":"AAAA,SAAQA,kBAAkB,QAAO,MAAM;AACvC,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAOC,KAAK,MAAM,SAAS;AAE3B,eAAe,MAAMC,QAAQ;EACzBC,WAAWA,CAAA,EAAE;IACT,IAAI,CAACC,MAAM,GAAG,EAAE;IAChB,IAAI,CAACC,KAAK,GAAG,EAAE;IACf,IAAI,CAACC,cAAc,GAAG,CAAC,CAAC;IACxB,IAAI,CAACC,aAAa,GAAG,CAAC,CAAC;IAEvB,IAAI,CAACC,KAAK,GAAG,CAAC;IACd,IAAI,CAACC,WAAW,GAAG,CAAC;IACpB,IAAI,CAACC,MAAM;IACXX,kBAAkB,CAAC,IAAI,CAAC;EAC5B;EAEAY,gBAAgBA,CAACC,KAAK,EAAC;IACnB,IAAI,CAACN,cAAc,GAAGM,KAAK;EAC/B;EAEAC,eAAeA,CAACC,IAAI,EAAC;IACjB,IAAI,CAACP,aAAa,GAAGO,IAAI;EAC7B;EAEAC,QAAQA,CAACH,KAAK,EAAC;IACX,IAAI,CAACR,MAAM,GAAGQ,KAAK;EACvB;EAEAI,OAAOA,CAACC,SAAS,EAAC;IACd,MAAMC,IAAI,GAAGD,SAAS,CAACE,GAAG,CAACC,IAAI,IAAIA,IAAI,GACnC;MAACC,EAAE,EAAED,IAAI,CAACC,EAAE;MAAEC,KAAK,EAAE,IAAIrB,KAAK,CAACmB,IAAI,CAACC,EAAE,EAAED,IAAI,CAACG,KAAK,EAAEH,IAAI,CAACF,IAAI,CAAC;MAC9DM,MAAM,EAAEJ,IAAI,CAACI,MAAM;MAAEC,QAAQ,EAAEL,IAAI,CAACN,IAAI,CAACY,EAAE,GAAG,GAAG,GAAGN,IAAI,CAACN,IAAI,CAACa,EAAE;MAChEf,KAAK,EAAE;QAACS,EAAE,EAAED,IAAI,CAACQ,OAAO;QAAEC,IAAI,EAAET,IAAI,CAACR,KAAK,CAACiB;MAAI,CAAC;MAAEC,IAAI,EAAE,IAAI9B,IAAI,CAACoB,IAAI,CAACU,IAAI,EAAC,KAAK;IAAC,CACrF,CAAC;IACD,IAAI,CAACzB,KAAK,GAAGa,IAAI;EACrB;EAEAa,OAAOA,CAACX,IAAI,EAAEK,QAAQ,EAAEO,SAAS,EAAC;IAC9B,MAAMC,GAAG,GAAI;MAACZ,EAAE,EAAED,IAAI,CAACC,EAAE;MAAEC,KAAK,EAAE,IAAIrB,KAAK,CAACmB,IAAI,CAACC,EAAE,EAAED,IAAI,CAACG,KAAK,EAAEH,IAAI,CAACF,IAAI,CAAC;MACvEM,MAAM,EAAEJ,IAAI,CAACI,MAAM;MAAEC,QAAQ,EAAEA,QAAQ;MACvCb,KAAK,EAAE;QAACS,EAAE,EAAED,IAAI,CAACQ,OAAO;QAAEC,IAAI,EAAEG;MAAS,CAAC;MAAEF,IAAI,EAAE,IAAI9B,IAAI,CAAC,CAAC,EAAC,KAAK;IAAC,CAAC;IACxE,IAAI,CAACK,KAAK,CAAC6B,IAAI,CAACD,GAAG,CAAC;EACxB;EAEAE,SAASA,CAACd,EAAE,EAAC;IACT,IAAI,CAAChB,KAAK,GAAG,IAAI,CAACA,KAAK,CAAC+B,MAAM,CAAClB,IAAI,IAAIA,IAAI,CAACG,EAAE,IAAIA,EAAE,CAAC;EACzD;EAEA,IAAIgB,MAAMA,CAAA,EAAE;IACR,OAAO,IAAI,CAACjC,MAAM;EACtB;EAEA,IAAIkC,KAAKA,CAAA,EAAE;IACP,OAAO,IAAI,CAACjC,KAAK;EACrB;EAEA,IAAIkC,aAAaA,CAAA,EAAE;IACf,OAAO,IAAI,CAACjC,cAAc;EAC9B;EAEA,IAAIkC,YAAYA,CAAA,EAAE;IACd,OAAO,IAAI,CAACjC,aAAa;EAC7B;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}